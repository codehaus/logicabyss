//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.3-hudson-jaxb-ri-2.2-70- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.02.02 at 03:31:08 PM MEZ 
//


package reactionruleml;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Concurrent.type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Concurrent.type">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;group ref="{http://www.ruleml.org/1.0/xsd}Concurrent.content"/>
 *       &lt;attGroup ref="{http://www.ruleml.org/1.0/xsd}Concurrent.attlist"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Concurrent.type", propOrder = {
    "oid",
    "eventContent"
})
public class ConcurrentType {

    protected OidType oid;
    @XmlElements({
        @XmlElement(name = "Atom", type = AtomType.class),
        @XmlElement(name = "Var", type = VarType.class),
        @XmlElement(name = "Disjunction", type = DisjunctionType.class),
        @XmlElement(name = "Not", type = NotType.class),
        @XmlElement(name = "Ind", type = IndType.class),
        @XmlElement(name = "Rule", type = RuleType.class),
        @XmlElement(name = "Message", type = MessageType.class),
        @XmlElement(name = "Neg", type = NegType.class),
        @XmlElement(name = "Naf", type = NafType.class),
        @XmlElement(name = "Expr", type = ExprType.class),
        @XmlElement(name = "on", type = OnType.class),
        @XmlElement(name = "Periodic", type = PeriodicType.class),
        @XmlElement(name = "Concurrent", type = ConcurrentType.class),
        @XmlElement(name = "Xor", type = XorType.class),
        @XmlElement(name = "Sequence", type = SequenceType.class),
        @XmlElement(name = "Conjunction", type = ConjunctionType.class),
        @XmlElement(name = "Any", type = AnyType.class),
        @XmlElement(name = "Aperiodic", type = AperiodicType.class)
    })
    protected List<Object> eventContent;

    /**
     * Gets the value of the oid property.
     * 
     * @return
     *     possible object is
     *     {@link OidType }
     *     
     */
    public OidType getOid() {
        return oid;
    }

    /**
     * Sets the value of the oid property.
     * 
     * @param value
     *     allowed object is
     *     {@link OidType }
     *     
     */
    public void setOid(OidType value) {
        this.oid = value;
    }

    /**
     * Gets the value of the eventContent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the eventContent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEventContent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AtomType }
     * {@link VarType }
     * {@link DisjunctionType }
     * {@link NotType }
     * {@link IndType }
     * {@link RuleType }
     * {@link MessageType }
     * {@link NegType }
     * {@link NafType }
     * {@link ExprType }
     * {@link OnType }
     * {@link PeriodicType }
     * {@link ConcurrentType }
     * {@link XorType }
     * {@link SequenceType }
     * {@link ConjunctionType }
     * {@link AnyType }
     * {@link AperiodicType }
     * 
     * 
     */
    public List<Object> getEventContent() {
        if (eventContent == null) {
            eventContent = new ArrayList<Object>();
        }
        return this.eventContent;
    }

}
