//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.3-hudson-jaxb-ri-2.2-70- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.02.02 at 03:31:08 PM MEZ 
//


package reactionruleml;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the reactionruleml package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _Choice_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Choice");
    private final static QName _Retract_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Retract");
    private final static QName _Oid_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "oid");
    private final static QName _Periodic_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Periodic");
    private final static QName _If_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "if");
    private final static QName _Atom_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Atom");
    private final static QName _Left_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "left");
    private final static QName _Do_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "do");
    private final static QName _Equal_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Equal");
    private final static QName _Rulebase_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Rulebase");
    private final static QName _Aperiodic_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Aperiodic");
    private final static QName _Slot_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "slot");
    private final static QName _Any_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Any");
    private final static QName _Scope_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "scope");
    private final static QName _Interval_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Interval");
    private final static QName _Flow_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Flow");
    private final static QName _Torso_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "torso");
    private final static QName _Update_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Update");
    private final static QName _Query_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Query");
    private final static QName _Degree_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "degree");
    private final static QName _Weak_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "weak");
    private final static QName _RuleML_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "RuleML");
    private final static QName _Skolem_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Skolem");
    private final static QName _Loop_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Loop");
    private final static QName _Var_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Var");
    private final static QName _Protocol_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "protocol");
    private final static QName _Reify_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Reify");
    private final static QName _Equivalent_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Equivalent");
    private final static QName _Message_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Message");
    private final static QName _Rule_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Rule");
    private final static QName _Rel_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Rel");
    private final static QName _Ind_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Ind");
    private final static QName _Not_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Not");
    private final static QName _Conjunction_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Conjunction");
    private final static QName _Time_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "time");
    private final static QName _RBSLA_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "RBSLA");
    private final static QName _Sender_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "sender");
    private final static QName _After_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "after");
    private final static QName _Data_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Data");
    private final static QName _Arg_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "arg");
    private final static QName _Repo_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "repo");
    private final static QName _Neg_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Neg");
    private final static QName _ElseAfter_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "elseAfter");
    private final static QName _On_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "on");
    private final static QName _Xor_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Xor");
    private final static QName _Sequence_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Sequence");
    private final static QName _Expr_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Expr");
    private final static QName _Right_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "right");
    private final static QName _Implies_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Implies");
    private final static QName _ElseDo_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "elseDo");
    private final static QName _Receiver_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "receiver");
    private final static QName _Naf_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Naf");
    private final static QName _Succession_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Succession");
    private final static QName _Assert_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Assert");
    private final static QName _Content_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "content");
    private final static QName _Disjunction_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Disjunction");
    private final static QName _Fun_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Fun");
    private final static QName _Plex_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Plex");
    private final static QName _Or_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Or");
    private final static QName _Then_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "then");
    private final static QName _Forall_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Forall");
    private final static QName _Strong_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "strong");
    private final static QName _Exists_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Exists");
    private final static QName _And_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "And");
    private final static QName _Entails_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Entails");
    private final static QName _Resl_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "resl");
    private final static QName _Else_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "else");
    private final static QName _Op_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "op");
    private final static QName _Label_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "label");
    private final static QName _Quantification_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "quantification");
    private final static QName _Concurrent_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "Concurrent");
    private final static QName _Declare_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "declare");
    private final static QName _RulebaseTypeFormula_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "formula");
    private final static QName _ExprTypeQualification_QNAME = new QName("http://www.ruleml.org/1.0/xsd", "qualification");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: reactionruleml
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link SenderType }
     * 
     */
    public SenderType createSenderType() {
        return new SenderType();
    }

    /**
     * Create an instance of {@link ImpliesType }
     * 
     */
    public ImpliesType createImpliesType() {
        return new ImpliesType();
    }

    /**
     * Create an instance of {@link DoType }
     * 
     */
    public DoType createDoType() {
        return new DoType();
    }

    /**
     * Create an instance of {@link SuccessionType }
     * 
     */
    public SuccessionType createSuccessionType() {
        return new SuccessionType();
    }

    /**
     * Create an instance of {@link AssertType }
     * 
     */
    public AssertType createAssertType() {
        return new AssertType();
    }

    /**
     * Create an instance of {@link NafType }
     * 
     */
    public NafType createNafType() {
        return new NafType();
    }

    /**
     * Create an instance of {@link RBSLAType }
     * 
     */
    public RBSLAType createRBSLAType() {
        return new RBSLAType();
    }

    /**
     * Create an instance of {@link IfType }
     * 
     */
    public IfType createIfType() {
        return new IfType();
    }

    /**
     * Create an instance of {@link ArgType }
     * 
     */
    public ArgType createArgType() {
        return new ArgType();
    }

    /**
     * Create an instance of {@link TimeType }
     * 
     */
    public TimeType createTimeType() {
        return new TimeType();
    }

    /**
     * Create an instance of {@link RepoType }
     * 
     */
    public RepoType createRepoType() {
        return new RepoType();
    }

    /**
     * Create an instance of {@link NegType }
     * 
     */
    public NegType createNegType() {
        return new NegType();
    }

    /**
     * Create an instance of {@link OnType }
     * 
     */
    public OnType createOnType() {
        return new OnType();
    }

    /**
     * Create an instance of {@link SequenceType }
     * 
     */
    public SequenceType createSequenceType() {
        return new SequenceType();
    }

    /**
     * Create an instance of {@link XorType }
     * 
     */
    public XorType createXorType() {
        return new XorType();
    }

    /**
     * Create an instance of {@link RightType }
     * 
     */
    public RightType createRightType() {
        return new RightType();
    }

    /**
     * Create an instance of {@link ExprType }
     * 
     */
    public ExprType createExprType() {
        return new ExprType();
    }

    /**
     * Create an instance of {@link ThenType }
     * 
     */
    public ThenType createThenType() {
        return new ThenType();
    }

    /**
     * Create an instance of {@link ReslType }
     * 
     */
    public ReslType createReslType() {
        return new ReslType();
    }

    /**
     * Create an instance of {@link OpAtomType }
     * 
     */
    public OpAtomType createOpAtomType() {
        return new OpAtomType();
    }

    /**
     * Create an instance of {@link QuantificationType }
     * 
     */
    public QuantificationType createQuantificationType() {
        return new QuantificationType();
    }

    /**
     * Create an instance of {@link LabelType }
     * 
     */
    public LabelType createLabelType() {
        return new LabelType();
    }

    /**
     * Create an instance of {@link ConcurrentType }
     * 
     */
    public ConcurrentType createConcurrentType() {
        return new ConcurrentType();
    }

    /**
     * Create an instance of {@link DeclareType }
     * 
     */
    public DeclareType createDeclareType() {
        return new DeclareType();
    }

    /**
     * Create an instance of {@link ContentType }
     * 
     */
    public ContentType createContentType() {
        return new ContentType();
    }

    /**
     * Create an instance of {@link DisjunctionType }
     * 
     */
    public DisjunctionType createDisjunctionType() {
        return new DisjunctionType();
    }

    /**
     * Create an instance of {@link FunType }
     * 
     */
    public FunType createFunType() {
        return new FunType();
    }

    /**
     * Create an instance of {@link PlexType }
     * 
     */
    public PlexType createPlexType() {
        return new PlexType();
    }

    /**
     * Create an instance of {@link ForallType }
     * 
     */
    public ForallType createForallType() {
        return new ForallType();
    }

    /**
     * Create an instance of {@link StrongType }
     * 
     */
    public StrongType createStrongType() {
        return new StrongType();
    }

    /**
     * Create an instance of {@link ExistsType }
     * 
     */
    public ExistsType createExistsType() {
        return new ExistsType();
    }

    /**
     * Create an instance of {@link OrInnerType }
     * 
     */
    public OrInnerType createOrInnerType() {
        return new OrInnerType();
    }

    /**
     * Create an instance of {@link AndInnerType }
     * 
     */
    public AndInnerType createAndInnerType() {
        return new AndInnerType();
    }

    /**
     * Create an instance of {@link EntailsType }
     * 
     */
    public EntailsType createEntailsType() {
        return new EntailsType();
    }

    /**
     * Create an instance of {@link FlowType }
     * 
     */
    public FlowType createFlowType() {
        return new FlowType();
    }

    /**
     * Create an instance of {@link TorsoType }
     * 
     */
    public TorsoType createTorsoType() {
        return new TorsoType();
    }

    /**
     * Create an instance of {@link AnyType }
     * 
     */
    public AnyType createAnyType() {
        return new AnyType();
    }

    /**
     * Create an instance of {@link ScopeType }
     * 
     */
    public ScopeType createScopeType() {
        return new ScopeType();
    }

    /**
     * Create an instance of {@link IntervalType }
     * 
     */
    public IntervalType createIntervalType() {
        return new IntervalType();
    }

    /**
     * Create an instance of {@link IntervalSuperType }
     * 
     */
    public IntervalSuperType createIntervalSuperType() {
        return new IntervalSuperType();
    }

    /**
     * Create an instance of {@link UpdateType }
     * 
     */
    public UpdateType createUpdateType() {
        return new UpdateType();
    }

    /**
     * Create an instance of {@link QueryType }
     * 
     */
    public QueryType createQueryType() {
        return new QueryType();
    }

    /**
     * Create an instance of {@link RetractType }
     * 
     */
    public RetractType createRetractType() {
        return new RetractType();
    }

    /**
     * Create an instance of {@link ChoiceType }
     * 
     */
    public ChoiceType createChoiceType() {
        return new ChoiceType();
    }

    /**
     * Create an instance of {@link AtomType }
     * 
     */
    public AtomType createAtomType() {
        return new AtomType();
    }

    /**
     * Create an instance of {@link PeriodicType }
     * 
     */
    public PeriodicType createPeriodicType() {
        return new PeriodicType();
    }

    /**
     * Create an instance of {@link OidType }
     * 
     */
    public OidType createOidType() {
        return new OidType();
    }

    /**
     * Create an instance of {@link RulebaseType }
     * 
     */
    public RulebaseType createRulebaseType() {
        return new RulebaseType();
    }

    /**
     * Create an instance of {@link EqualType }
     * 
     */
    public EqualType createEqualType() {
        return new EqualType();
    }

    /**
     * Create an instance of {@link LeftType }
     * 
     */
    public LeftType createLeftType() {
        return new LeftType();
    }

    /**
     * Create an instance of {@link SlotType }
     * 
     */
    public SlotType createSlotType() {
        return new SlotType();
    }

    /**
     * Create an instance of {@link AperiodicType }
     * 
     */
    public AperiodicType createAperiodicType() {
        return new AperiodicType();
    }

    /**
     * Create an instance of {@link ReifyType }
     * 
     */
    public ReifyType createReifyType() {
        return new ReifyType();
    }

    /**
     * Create an instance of {@link EquivalentType }
     * 
     */
    public EquivalentType createEquivalentType() {
        return new EquivalentType();
    }

    /**
     * Create an instance of {@link ProtocolType }
     * 
     */
    public ProtocolType createProtocolType() {
        return new ProtocolType();
    }

    /**
     * Create an instance of {@link MessageType }
     * 
     */
    public MessageType createMessageType() {
        return new MessageType();
    }

    /**
     * Create an instance of {@link RuleType }
     * 
     */
    public RuleType createRuleType() {
        return new RuleType();
    }

    /**
     * Create an instance of {@link IndType }
     * 
     */
    public IndType createIndType() {
        return new IndType();
    }

    /**
     * Create an instance of {@link RelType }
     * 
     */
    public RelType createRelType() {
        return new RelType();
    }

    /**
     * Create an instance of {@link ConjunctionType }
     * 
     */
    public ConjunctionType createConjunctionType() {
        return new ConjunctionType();
    }

    /**
     * Create an instance of {@link NotType }
     * 
     */
    public NotType createNotType() {
        return new NotType();
    }

    /**
     * Create an instance of {@link DegreeType }
     * 
     */
    public DegreeType createDegreeType() {
        return new DegreeType();
    }

    /**
     * Create an instance of {@link SkolemType }
     * 
     */
    public SkolemType createSkolemType() {
        return new SkolemType();
    }

    /**
     * Create an instance of {@link WeakType }
     * 
     */
    public WeakType createWeakType() {
        return new WeakType();
    }

    /**
     * Create an instance of {@link RuleMLType }
     * 
     */
    public RuleMLType createRuleMLType() {
        return new RuleMLType();
    }

    /**
     * Create an instance of {@link VarType }
     * 
     */
    public VarType createVarType() {
        return new VarType();
    }

    /**
     * Create an instance of {@link LoopType }
     * 
     */
    public LoopType createLoopType() {
        return new LoopType();
    }

    /**
     * Create an instance of {@link FormulaForallType }
     * 
     */
    public FormulaForallType createFormulaForallType() {
        return new FormulaForallType();
    }

    /**
     * Create an instance of {@link FormulaQueryType }
     * 
     */
    public FormulaQueryType createFormulaQueryType() {
        return new FormulaQueryType();
    }

    /**
     * Create an instance of {@link IfEntailsType }
     * 
     */
    public IfEntailsType createIfEntailsType() {
        return new IfEntailsType();
    }

    /**
     * Create an instance of {@link FormulaExistsType }
     * 
     */
    public FormulaExistsType createFormulaExistsType() {
        return new FormulaExistsType();
    }

    /**
     * Create an instance of {@link PlexReslType }
     * 
     */
    public PlexReslType createPlexReslType() {
        return new PlexReslType();
    }

    /**
     * Create an instance of {@link FormulaAssertType }
     * 
     */
    public FormulaAssertType createFormulaAssertType() {
        return new FormulaAssertType();
    }

    /**
     * Create an instance of {@link PlexRepoType }
     * 
     */
    public PlexRepoType createPlexRepoType() {
        return new PlexRepoType();
    }

    /**
     * Create an instance of {@link AndQueryType }
     * 
     */
    public AndQueryType createAndQueryType() {
        return new AndQueryType();
    }

    /**
     * Create an instance of {@link ThenEntailsType }
     * 
     */
    public ThenEntailsType createThenEntailsType() {
        return new ThenEntailsType();
    }

    /**
     * Create an instance of {@link OrQueryType }
     * 
     */
    public OrQueryType createOrQueryType() {
        return new OrQueryType();
    }

    /**
     * Create an instance of {@link FormulaAndOrType }
     * 
     */
    public FormulaAndOrType createFormulaAndOrType() {
        return new FormulaAndOrType();
    }

    /**
     * Create an instance of {@link FormulaRulebaseType }
     * 
     */
    public FormulaRulebaseType createFormulaRulebaseType() {
        return new FormulaRulebaseType();
    }

    /**
     * Create an instance of {@link OpExprType }
     * 
     */
    public OpExprType createOpExprType() {
        return new OpExprType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ChoiceType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Choice")
    public JAXBElement<ChoiceType> createChoice(ChoiceType value) {
        return new JAXBElement<ChoiceType>(_Choice_QNAME, ChoiceType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RetractType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Retract")
    public JAXBElement<RetractType> createRetract(RetractType value) {
        return new JAXBElement<RetractType>(_Retract_QNAME, RetractType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OidType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "oid")
    public JAXBElement<OidType> createOid(OidType value) {
        return new JAXBElement<OidType>(_Oid_QNAME, OidType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PeriodicType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Periodic")
    public JAXBElement<PeriodicType> createPeriodic(PeriodicType value) {
        return new JAXBElement<PeriodicType>(_Periodic_QNAME, PeriodicType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link IfType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "if")
    public JAXBElement<IfType> createIf(IfType value) {
        return new JAXBElement<IfType>(_If_QNAME, IfType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AtomType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Atom")
    public JAXBElement<AtomType> createAtom(AtomType value) {
        return new JAXBElement<AtomType>(_Atom_QNAME, AtomType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LeftType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "left")
    public JAXBElement<LeftType> createLeft(LeftType value) {
        return new JAXBElement<LeftType>(_Left_QNAME, LeftType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DoType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "do")
    public JAXBElement<DoType> createDo(DoType value) {
        return new JAXBElement<DoType>(_Do_QNAME, DoType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EqualType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Equal")
    public JAXBElement<EqualType> createEqual(EqualType value) {
        return new JAXBElement<EqualType>(_Equal_QNAME, EqualType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RulebaseType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Rulebase")
    public JAXBElement<RulebaseType> createRulebase(RulebaseType value) {
        return new JAXBElement<RulebaseType>(_Rulebase_QNAME, RulebaseType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AperiodicType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Aperiodic")
    public JAXBElement<AperiodicType> createAperiodic(AperiodicType value) {
        return new JAXBElement<AperiodicType>(_Aperiodic_QNAME, AperiodicType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SlotType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "slot")
    public JAXBElement<SlotType> createSlot(SlotType value) {
        return new JAXBElement<SlotType>(_Slot_QNAME, SlotType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AnyType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Any")
    public JAXBElement<AnyType> createAny(AnyType value) {
        return new JAXBElement<AnyType>(_Any_QNAME, AnyType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ScopeType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "scope")
    public JAXBElement<ScopeType> createScope(ScopeType value) {
        return new JAXBElement<ScopeType>(_Scope_QNAME, ScopeType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link IntervalType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Interval")
    public JAXBElement<IntervalType> createInterval(IntervalType value) {
        return new JAXBElement<IntervalType>(_Interval_QNAME, IntervalType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link FlowType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Flow")
    public JAXBElement<FlowType> createFlow(FlowType value) {
        return new JAXBElement<FlowType>(_Flow_QNAME, FlowType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TorsoType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "torso")
    public JAXBElement<TorsoType> createTorso(TorsoType value) {
        return new JAXBElement<TorsoType>(_Torso_QNAME, TorsoType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link UpdateType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Update")
    public JAXBElement<UpdateType> createUpdate(UpdateType value) {
        return new JAXBElement<UpdateType>(_Update_QNAME, UpdateType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link QueryType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Query")
    public JAXBElement<QueryType> createQuery(QueryType value) {
        return new JAXBElement<QueryType>(_Query_QNAME, QueryType.class, null, value);
    }

    /**
     * Create an instance of {@link IntervalSuper }}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "interval")
    public IntervalSuper createIntervalSuper(IntervalSuperType value) {
        return new IntervalSuper(value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DegreeType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "degree")
    public JAXBElement<DegreeType> createDegree(DegreeType value) {
        return new JAXBElement<DegreeType>(_Degree_QNAME, DegreeType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link WeakType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "weak")
    public JAXBElement<WeakType> createWeak(WeakType value) {
        return new JAXBElement<WeakType>(_Weak_QNAME, WeakType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RuleMLType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "RuleML")
    public JAXBElement<RuleMLType> createRuleML(RuleMLType value) {
        return new JAXBElement<RuleMLType>(_RuleML_QNAME, RuleMLType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SkolemType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Skolem")
    public JAXBElement<SkolemType> createSkolem(SkolemType value) {
        return new JAXBElement<SkolemType>(_Skolem_QNAME, SkolemType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LoopType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Loop")
    public JAXBElement<LoopType> createLoop(LoopType value) {
        return new JAXBElement<LoopType>(_Loop_QNAME, LoopType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link VarType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Var")
    public JAXBElement<VarType> createVar(VarType value) {
        return new JAXBElement<VarType>(_Var_QNAME, VarType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ProtocolType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "protocol")
    public JAXBElement<ProtocolType> createProtocol(ProtocolType value) {
        return new JAXBElement<ProtocolType>(_Protocol_QNAME, ProtocolType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ReifyType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Reify")
    public JAXBElement<ReifyType> createReify(ReifyType value) {
        return new JAXBElement<ReifyType>(_Reify_QNAME, ReifyType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EquivalentType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Equivalent")
    public JAXBElement<EquivalentType> createEquivalent(EquivalentType value) {
        return new JAXBElement<EquivalentType>(_Equivalent_QNAME, EquivalentType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link MessageType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Message")
    public JAXBElement<MessageType> createMessage(MessageType value) {
        return new JAXBElement<MessageType>(_Message_QNAME, MessageType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RuleType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Rule")
    public JAXBElement<RuleType> createRule(RuleType value) {
        return new JAXBElement<RuleType>(_Rule_QNAME, RuleType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RelType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Rel")
    public JAXBElement<RelType> createRel(RelType value) {
        return new JAXBElement<RelType>(_Rel_QNAME, RelType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link IndType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Ind")
    public JAXBElement<IndType> createInd(IndType value) {
        return new JAXBElement<IndType>(_Ind_QNAME, IndType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NotType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Not")
    public JAXBElement<NotType> createNot(NotType value) {
        return new JAXBElement<NotType>(_Not_QNAME, NotType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ConjunctionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Conjunction")
    public JAXBElement<ConjunctionType> createConjunction(ConjunctionType value) {
        return new JAXBElement<ConjunctionType>(_Conjunction_QNAME, ConjunctionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TimeType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "time")
    public JAXBElement<TimeType> createTime(TimeType value) {
        return new JAXBElement<TimeType>(_Time_QNAME, TimeType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RBSLAType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "RBSLA")
    public JAXBElement<RBSLAType> createRBSLA(RBSLAType value) {
        return new JAXBElement<RBSLAType>(_RBSLA_QNAME, RBSLAType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SenderType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "sender")
    public JAXBElement<SenderType> createSender(SenderType value) {
        return new JAXBElement<SenderType>(_Sender_QNAME, SenderType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link IfType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "after")
    public JAXBElement<IfType> createAfter(IfType value) {
        return new JAXBElement<IfType>(_After_QNAME, IfType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Data")
    public JAXBElement<Object> createData(Object value) {
        return new JAXBElement<Object>(_Data_QNAME, Object.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ArgType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "arg")
    public JAXBElement<ArgType> createArg(ArgType value) {
        return new JAXBElement<ArgType>(_Arg_QNAME, ArgType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RepoType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "repo")
    public JAXBElement<RepoType> createRepo(RepoType value) {
        return new JAXBElement<RepoType>(_Repo_QNAME, RepoType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NegType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Neg")
    public JAXBElement<NegType> createNeg(NegType value) {
        return new JAXBElement<NegType>(_Neg_QNAME, NegType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link IfType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "elseAfter")
    public JAXBElement<IfType> createElseAfter(IfType value) {
        return new JAXBElement<IfType>(_ElseAfter_QNAME, IfType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OnType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "on")
    public JAXBElement<OnType> createOn(OnType value) {
        return new JAXBElement<OnType>(_On_QNAME, OnType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link XorType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Xor")
    public JAXBElement<XorType> createXor(XorType value) {
        return new JAXBElement<XorType>(_Xor_QNAME, XorType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SequenceType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Sequence")
    public JAXBElement<SequenceType> createSequence(SequenceType value) {
        return new JAXBElement<SequenceType>(_Sequence_QNAME, SequenceType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ExprType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Expr")
    public JAXBElement<ExprType> createExpr(ExprType value) {
        return new JAXBElement<ExprType>(_Expr_QNAME, ExprType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RightType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "right")
    public JAXBElement<RightType> createRight(RightType value) {
        return new JAXBElement<RightType>(_Right_QNAME, RightType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ImpliesType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Implies")
    public JAXBElement<ImpliesType> createImplies(ImpliesType value) {
        return new JAXBElement<ImpliesType>(_Implies_QNAME, ImpliesType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DoType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "elseDo")
    public JAXBElement<DoType> createElseDo(DoType value) {
        return new JAXBElement<DoType>(_ElseDo_QNAME, DoType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SenderType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "receiver")
    public JAXBElement<SenderType> createReceiver(SenderType value) {
        return new JAXBElement<SenderType>(_Receiver_QNAME, SenderType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NafType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Naf")
    public JAXBElement<NafType> createNaf(NafType value) {
        return new JAXBElement<NafType>(_Naf_QNAME, NafType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SuccessionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Succession")
    public JAXBElement<SuccessionType> createSuccession(SuccessionType value) {
        return new JAXBElement<SuccessionType>(_Succession_QNAME, SuccessionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AssertType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Assert")
    public JAXBElement<AssertType> createAssert(AssertType value) {
        return new JAXBElement<AssertType>(_Assert_QNAME, AssertType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ContentType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "content")
    public JAXBElement<ContentType> createContent(ContentType value) {
        return new JAXBElement<ContentType>(_Content_QNAME, ContentType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DisjunctionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Disjunction")
    public JAXBElement<DisjunctionType> createDisjunction(DisjunctionType value) {
        return new JAXBElement<DisjunctionType>(_Disjunction_QNAME, DisjunctionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link FunType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Fun")
    public JAXBElement<FunType> createFun(FunType value) {
        return new JAXBElement<FunType>(_Fun_QNAME, FunType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlexType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Plex")
    public JAXBElement<PlexType> createPlex(PlexType value) {
        return new JAXBElement<PlexType>(_Plex_QNAME, PlexType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OrInnerType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Or")
    public JAXBElement<OrInnerType> createOr(OrInnerType value) {
        return new JAXBElement<OrInnerType>(_Or_QNAME, OrInnerType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ThenType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "then")
    public JAXBElement<ThenType> createThen(ThenType value) {
        return new JAXBElement<ThenType>(_Then_QNAME, ThenType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ForallType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Forall")
    public JAXBElement<ForallType> createForall(ForallType value) {
        return new JAXBElement<ForallType>(_Forall_QNAME, ForallType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link StrongType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "strong")
    public JAXBElement<StrongType> createStrong(StrongType value) {
        return new JAXBElement<StrongType>(_Strong_QNAME, StrongType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ExistsType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Exists")
    public JAXBElement<ExistsType> createExists(ExistsType value) {
        return new JAXBElement<ExistsType>(_Exists_QNAME, ExistsType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AndInnerType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "And")
    public JAXBElement<AndInnerType> createAnd(AndInnerType value) {
        return new JAXBElement<AndInnerType>(_And_QNAME, AndInnerType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EntailsType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Entails")
    public JAXBElement<EntailsType> createEntails(EntailsType value) {
        return new JAXBElement<EntailsType>(_Entails_QNAME, EntailsType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ReslType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "resl")
    public JAXBElement<ReslType> createResl(ReslType value) {
        return new JAXBElement<ReslType>(_Resl_QNAME, ReslType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ThenType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "else")
    public JAXBElement<ThenType> createElse(ThenType value) {
        return new JAXBElement<ThenType>(_Else_QNAME, ThenType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OpAtomType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "op")
    public JAXBElement<OpAtomType> createOp(OpAtomType value) {
        return new JAXBElement<OpAtomType>(_Op_QNAME, OpAtomType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LabelType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "label")
    public JAXBElement<LabelType> createLabel(LabelType value) {
        return new JAXBElement<LabelType>(_Label_QNAME, LabelType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link QuantificationType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "quantification")
    public JAXBElement<QuantificationType> createQuantification(QuantificationType value) {
        return new JAXBElement<QuantificationType>(_Quantification_QNAME, QuantificationType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ConcurrentType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Concurrent")
    public JAXBElement<ConcurrentType> createConcurrent(ConcurrentType value) {
        return new JAXBElement<ConcurrentType>(_Concurrent_QNAME, ConcurrentType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DeclareType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "declare")
    public JAXBElement<DeclareType> createDeclare(DeclareType value) {
        return new JAXBElement<DeclareType>(_Declare_QNAME, DeclareType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlexType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Plex", scope = PlexType.class)
    public JAXBElement<PlexType> createPlexTypePlex(PlexType value) {
        return new JAXBElement<PlexType>(_Plex_QNAME, PlexType.class, PlexType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SlotType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "slot", scope = PlexType.class)
    public JAXBElement<SlotType> createPlexTypeSlot(SlotType value) {
        return new JAXBElement<SlotType>(_Slot_QNAME, SlotType.class, PlexType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Equivalent", scope = RulebaseType.class)
    public JAXBElement<Object> createRulebaseTypeEquivalent(Object value) {
        return new JAXBElement<Object>(_Equivalent_QNAME, Object.class, RulebaseType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Implies", scope = RulebaseType.class)
    public JAXBElement<Object> createRulebaseTypeImplies(Object value) {
        return new JAXBElement<Object>(_Implies_QNAME, Object.class, RulebaseType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Forall", scope = RulebaseType.class)
    public JAXBElement<Object> createRulebaseTypeForall(Object value) {
        return new JAXBElement<Object>(_Forall_QNAME, Object.class, RulebaseType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AtomType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Atom", scope = RulebaseType.class)
    public JAXBElement<AtomType> createRulebaseTypeAtom(AtomType value) {
        return new JAXBElement<AtomType>(_Atom_QNAME, AtomType.class, RulebaseType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Rule", scope = RulebaseType.class)
    public JAXBElement<Object> createRulebaseTypeRule(Object value) {
        return new JAXBElement<Object>(_Rule_QNAME, Object.class, RulebaseType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link FormulaRulebaseType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "formula", scope = RulebaseType.class)
    public JAXBElement<FormulaRulebaseType> createRulebaseTypeFormula(FormulaRulebaseType value) {
        return new JAXBElement<FormulaRulebaseType>(_RulebaseTypeFormula_QNAME, FormulaRulebaseType.class, RulebaseType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "qualification", scope = ExprType.class)
    public JAXBElement<Object> createExprTypeQualification(Object value) {
        return new JAXBElement<Object>(_ExprTypeQualification_QNAME, Object.class, ExprType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "scope", scope = ExprType.class)
    public JAXBElement<Object> createExprTypeScope(Object value) {
        return new JAXBElement<Object>(_Scope_QNAME, Object.class, ExprType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlexType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Plex", scope = ExprType.class)
    public JAXBElement<PlexType> createExprTypePlex(PlexType value) {
        return new JAXBElement<PlexType>(_Plex_QNAME, PlexType.class, ExprType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OpExprType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "op", scope = ExprType.class)
    public JAXBElement<OpExprType> createExprTypeOp(OpExprType value) {
        return new JAXBElement<OpExprType>(_Op_QNAME, OpExprType.class, ExprType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "label", scope = ExprType.class)
    public JAXBElement<Object> createExprTypeLabel(Object value) {
        return new JAXBElement<Object>(_Label_QNAME, Object.class, ExprType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SlotType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "slot", scope = ExprType.class)
    public JAXBElement<SlotType> createExprTypeSlot(SlotType value) {
        return new JAXBElement<SlotType>(_Slot_QNAME, SlotType.class, ExprType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "qualification", scope = RuleType.class)
    public JAXBElement<Object> createRuleTypeQualification(Object value) {
        return new JAXBElement<Object>(_ExprTypeQualification_QNAME, Object.class, RuleType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "scope", scope = RuleType.class)
    public JAXBElement<Object> createRuleTypeScope(Object value) {
        return new JAXBElement<Object>(_Scope_QNAME, Object.class, RuleType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "label", scope = RuleType.class)
    public JAXBElement<Object> createRuleTypeLabel(Object value) {
        return new JAXBElement<Object>(_Label_QNAME, Object.class, RuleType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OrInnerType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Or", scope = ImpliesType.class)
    public JAXBElement<OrInnerType> createImpliesTypeOr(OrInnerType value) {
        return new JAXBElement<OrInnerType>(_Or_QNAME, OrInnerType.class, ImpliesType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AtomType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Atom", scope = ImpliesType.class)
    public JAXBElement<AtomType> createImpliesTypeAtom(AtomType value) {
        return new JAXBElement<AtomType>(_Atom_QNAME, AtomType.class, ImpliesType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AndInnerType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "And", scope = ImpliesType.class)
    public JAXBElement<AndInnerType> createImpliesTypeAnd(AndInnerType value) {
        return new JAXBElement<AndInnerType>(_And_QNAME, AndInnerType.class, ImpliesType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link IfEntailsType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "if", scope = EntailsType.class)
    public JAXBElement<IfEntailsType> createEntailsTypeIf(IfEntailsType value) {
        return new JAXBElement<IfEntailsType>(_If_QNAME, IfEntailsType.class, EntailsType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ThenEntailsType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "then", scope = EntailsType.class)
    public JAXBElement<ThenEntailsType> createEntailsTypeThen(ThenEntailsType value) {
        return new JAXBElement<ThenEntailsType>(_Then_QNAME, ThenEntailsType.class, EntailsType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AtomType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Atom", scope = UpdateType.class)
    public JAXBElement<AtomType> createUpdateTypeAtom(AtomType value) {
        return new JAXBElement<AtomType>(_Atom_QNAME, AtomType.class, UpdateType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "qualification", scope = AtomType.class)
    public JAXBElement<Object> createAtomTypeQualification(Object value) {
        return new JAXBElement<Object>(_ExprTypeQualification_QNAME, Object.class, AtomType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "scope", scope = AtomType.class)
    public JAXBElement<Object> createAtomTypeScope(Object value) {
        return new JAXBElement<Object>(_Scope_QNAME, Object.class, AtomType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlexType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Plex", scope = AtomType.class)
    public JAXBElement<PlexType> createAtomTypePlex(PlexType value) {
        return new JAXBElement<PlexType>(_Plex_QNAME, PlexType.class, AtomType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OpAtomType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "op", scope = AtomType.class)
    public JAXBElement<OpAtomType> createAtomTypeOp(OpAtomType value) {
        return new JAXBElement<OpAtomType>(_Op_QNAME, OpAtomType.class, AtomType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "label", scope = AtomType.class)
    public JAXBElement<Object> createAtomTypeLabel(Object value) {
        return new JAXBElement<Object>(_Label_QNAME, Object.class, AtomType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SlotType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "slot", scope = AtomType.class)
    public JAXBElement<SlotType> createAtomTypeSlot(SlotType value) {
        return new JAXBElement<SlotType>(_Slot_QNAME, SlotType.class, AtomType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlexType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Plex", scope = EqualType.class)
    public JAXBElement<PlexType> createEqualTypePlex(PlexType value) {
        return new JAXBElement<PlexType>(_Plex_QNAME, PlexType.class, EqualType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "qualification", scope = MessageType.class)
    public JAXBElement<Object> createMessageTypeQualification(Object value) {
        return new JAXBElement<Object>(_ExprTypeQualification_QNAME, Object.class, MessageType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "scope", scope = MessageType.class)
    public JAXBElement<Object> createMessageTypeScope(Object value) {
        return new JAXBElement<Object>(_Scope_QNAME, Object.class, MessageType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OrQueryType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Or", scope = MessageType.class)
    public JAXBElement<OrQueryType> createMessageTypeOr(OrQueryType value) {
        return new JAXBElement<OrQueryType>(_Or_QNAME, OrQueryType.class, MessageType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AtomType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Atom", scope = MessageType.class)
    public JAXBElement<AtomType> createMessageTypeAtom(AtomType value) {
        return new JAXBElement<AtomType>(_Atom_QNAME, AtomType.class, MessageType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "label", scope = MessageType.class)
    public JAXBElement<Object> createMessageTypeLabel(Object value) {
        return new JAXBElement<Object>(_Label_QNAME, Object.class, MessageType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AndQueryType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "And", scope = MessageType.class)
    public JAXBElement<AndQueryType> createMessageTypeAnd(AndQueryType value) {
        return new JAXBElement<AndQueryType>(_And_QNAME, AndQueryType.class, MessageType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlexType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Plex", scope = SlotType.class)
    public JAXBElement<PlexType> createSlotTypePlex(PlexType value) {
        return new JAXBElement<PlexType>(_Plex_QNAME, PlexType.class, SlotType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OrInnerType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Or", scope = FormulaAndOrType.class)
    public JAXBElement<OrInnerType> createFormulaAndOrTypeOr(OrInnerType value) {
        return new JAXBElement<OrInnerType>(_Or_QNAME, OrInnerType.class, FormulaAndOrType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AtomType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "Atom", scope = FormulaAndOrType.class)
    public JAXBElement<AtomType> createFormulaAndOrTypeAtom(AtomType value) {
        return new JAXBElement<AtomType>(_Atom_QNAME, AtomType.class, FormulaAndOrType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AndInnerType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://www.ruleml.org/1.0/xsd", name = "And", scope = FormulaAndOrType.class)
    public JAXBElement<AndInnerType> createFormulaAndOrTypeAnd(AndInnerType value) {
        return new JAXBElement<AndInnerType>(_And_QNAME, AndInnerType.class, FormulaAndOrType.class, value);
    }

}
