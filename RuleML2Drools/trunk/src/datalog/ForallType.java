//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.11.14 at 09:34:39 AM MEZ 
//


package datalog;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Forall.type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Forall.type">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;group ref="{http://www.ruleml.org/1.0/xsd}Forall.content"/>
 *       &lt;attGroup ref="{http://www.ruleml.org/1.0/xsd}Forall.attlist"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Forall.type", propOrder = {
    "oid",
    "declareOrVar",
    "formula",
    "atom",
    "implies",
    "equivalent",
    "forall"
})
public class ForallType {

    protected OidType oid;
    @XmlElements({
        @XmlElement(name = "declare", type = DeclareType.class),
        @XmlElement(name = "Var", type = VarType.class)
    })
    protected List<Object> declareOrVar;
    protected FormulaForallType formula;
    @XmlElement(name = "Atom")
    protected AtomType atom;
    @XmlElement(name = "Implies")
    protected ImpliesType implies;
    @XmlElement(name = "Equivalent")
    protected EquivalentType equivalent;
    @XmlElement(name = "Forall")
    protected ForallType forall;

    /**
     * Gets the value of the oid property.
     * 
     * @return
     *     possible object is
     *     {@link OidType }
     *     
     */
    public OidType getOid() {
        return oid;
    }

    /**
     * Sets the value of the oid property.
     * 
     * @param value
     *     allowed object is
     *     {@link OidType }
     *     
     */
    public void setOid(OidType value) {
        this.oid = value;
    }

    /**
     * Gets the value of the declareOrVar property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the declareOrVar property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDeclareOrVar().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DeclareType }
     * {@link VarType }
     * 
     * 
     */
    public List<Object> getDeclareOrVar() {
        if (declareOrVar == null) {
            declareOrVar = new ArrayList<Object>();
        }
        return this.declareOrVar;
    }

    /**
     * Gets the value of the formula property.
     * 
     * @return
     *     possible object is
     *     {@link FormulaForallType }
     *     
     */
    public FormulaForallType getFormula() {
        return formula;
    }

    /**
     * Sets the value of the formula property.
     * 
     * @param value
     *     allowed object is
     *     {@link FormulaForallType }
     *     
     */
    public void setFormula(FormulaForallType value) {
        this.formula = value;
    }

    /**
     * Gets the value of the atom property.
     * 
     * @return
     *     possible object is
     *     {@link AtomType }
     *     
     */
    public AtomType getAtom() {
        return atom;
    }

    /**
     * Sets the value of the atom property.
     * 
     * @param value
     *     allowed object is
     *     {@link AtomType }
     *     
     */
    public void setAtom(AtomType value) {
        this.atom = value;
    }

    /**
     * Gets the value of the implies property.
     * 
     * @return
     *     possible object is
     *     {@link ImpliesType }
     *     
     */
    public ImpliesType getImplies() {
        return implies;
    }

    /**
     * Sets the value of the implies property.
     * 
     * @param value
     *     allowed object is
     *     {@link ImpliesType }
     *     
     */
    public void setImplies(ImpliesType value) {
        this.implies = value;
    }

    /**
     * Gets the value of the equivalent property.
     * 
     * @return
     *     possible object is
     *     {@link EquivalentType }
     *     
     */
    public EquivalentType getEquivalent() {
        return equivalent;
    }

    /**
     * Sets the value of the equivalent property.
     * 
     * @param value
     *     allowed object is
     *     {@link EquivalentType }
     *     
     */
    public void setEquivalent(EquivalentType value) {
        this.equivalent = value;
    }

    /**
     * Gets the value of the forall property.
     * 
     * @return
     *     possible object is
     *     {@link ForallType }
     *     
     */
    public ForallType getForall() {
        return forall;
    }

    /**
     * Sets the value of the forall property.
     * 
     * @param value
     *     allowed object is
     *     {@link ForallType }
     *     
     */
    public void setForall(ForallType value) {
        this.forall = value;
    }

}
